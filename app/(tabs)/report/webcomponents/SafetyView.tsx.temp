import React, { useState } from "react";

// Define tipos para nuestros datos de seguridad
interface IncidenteSeguridad {
  id: string;
  fecha: string;
  tipo: string;
  gravedad: "Alta" | "Media" | "Baja";
  descripcion: string;
  ubicacion: string;
  estado: "Abierto" | "Cerrado" | "En Progreso";
  acciones: string[];
  responsable: string;
}

interface EventoMantenimiento {
  codigo: string;
  nombre: string;
  fechaInicio: string;
  fechaFin: string;
  duracion: number; // en horas
  estado: "Pendiente" | "En Progreso" | "Completado";
  area: string;
  riesgo: "Alto" | "Medio" | "Bajo";
  recursos: string[];
  responsable: string;
}

interface KPISeguridad {
  etiqueta: string;
  valor: number;
  meta: number;
  unidad: string;
  tendencia: "subiendo" | "bajando" | "estable";
}

interface Props {
  selectedProject?: string;
}

const SafetyView: React.FC<Props> = ({ selectedProject }) => {
  const [activeTab, setActiveTab] = useState<"KPIs" | "Eventos" | "Mantenimiento">("KPIs");
  const [selectedFilter, setSelectedFilter] = useState<"Todos" | "Alto" | "Medio" | "Bajo">("Todos");

  // Datos KPI de ejemplo
  const kpisSeguridad: KPISeguridad[] = [
    {
      etiqueta: "Tasa Total de Incidentes Registrables (TTIR)",
      valor: 0.45,
      meta: 0.5,
      unidad: "incidentes por 200,000 horas",
      tendencia: "bajando",
    },
    {
      etiqueta: "Tasa de Frecuencia de Lesiones con Tiempo Perdido (LTIFR)",
      valor: 0.12,
      meta: 0.2,
      unidad: "incidentes por 1,000,000 horas",
      tendencia: "bajando",
    },
    {
      etiqueta: "Reportes de Casi Accidentes",
      valor: 24,
      meta: 20,
      unidad: "reportes este mes",
      tendencia: "subiendo",
    },
    {
      etiqueta: "Cumplimiento de Capacitación en Seguridad",
      valor: 95,
      meta: 100,
      unidad: "%",
      tendencia: "subiendo",
    },
  ];

  // Datos de incidentes de ejemplo
  const incidentesSeguridad: IncidenteSeguridad[] = [
    {
      id: "INC-001",
      fecha: "2025-08-09",
      tipo: "Casi Accidente",
      gravedad: "Media",
      descripcion: "Equipo suelto detectado durante inspección rutinaria",
      ubicacion: "Sección 1 - Chancadora Primaria",
      estado: "Cerrado",
      acciones: [
        "Equipo asegurado inmediatamente",
        "Protocolo de inspección actualizado",
        "Reunión informativa realizada con el personal",
      ],
      responsable: "Equipo de Mantenimiento",
    },
    {
      id: "INC-002",
      fecha: "2025-08-08",
      tipo: "Observación de Seguridad",
      gravedad: "Baja",
      descripcion:
        "Problema de cumplimiento de EPP observado durante cambio de turno",
      ubicacion: "Punto de Acceso Principal",
      estado: "Cerrado",
      acciones: [
        "Recordatorio enviado a todo el personal",
        "Estaciones adicionales de EPP instaladas",
      ],
      responsable: "Departamento de Seguridad",
    },
    {
      id: "INC-003",
      fecha: "2025-08-12",
      tipo: "Alerta de Seguridad",
      gravedad: "Alta",
      descripcion: "Sobrecarga detectada en sistema de alimentación Pebbles 3M",
      ubicacion: "Sección Alimentador Pebbles 3M (FEB022)",
      estado: "En Progreso",
      acciones: [
        "Parada de emergencia activada",
        "Inspección completa del sistema",
        "Revisión de procedimientos de operación",
      ],
      responsable: "F. García",
    },
  ];

  // Datos de eventos de mantenimiento basados en el CSV proporcionado
  const eventosMantenimiento: EventoMantenimiento[] = [
    {
      codigo: "1.1.1.1",
      nombre: "PM Alimentador Pebbles 3M - PM chute de descarga hacia la chancadora",
      fechaInicio: "31/05/25 08:00",
      fechaFin: "02/06/25 08:00",
      duracion: 48,
      estado: "Completado",
      area: "Chancado Pebbles",
      riesgo: "Medio",
      recursos: ["Mecánico 1", "Mecánico 2"],
      responsable: "F. García",
    },
    {
      codigo: "1.1.1.1.3",
      nombre: "PM chute de descarga hacia la chancadora",
      fechaInicio: "03/06/25 20:00",
      fechaFin: "04/06/25 20:00",
      duracion: 24,
      estado: "Completado",
      area: "Chancado Pebbles",
      riesgo: "Alto",
      recursos: ["Mecánico 1", "Mecánico 4", "Soldador"],
      responsable: "F. García",
    },
    {
      codigo: "1.1.1.1.6",
      nombre: "Inspección Alimentador Pebbles 3M",
      fechaInicio: "05/06/25 20:00",
      fechaFin: "06/06/25 08:00",
      duracion: 12,
      estado: "Completado",
      area: "Chancado Pebbles",
      riesgo: "Bajo",
      recursos: ["Mecánico 3", "Inspector de Seguridad"],
      responsable: "J. Rodríguez",
    },
    {
      codigo: "1.1.1.1.7",
      nombre: "Alineamiento de plataforma de impacto y polines de carga",
      fechaInicio: "06/06/25 08:00",
      fechaFin: "07/06/25 08:00",
      duracion: 24,
      estado: "Completado",
      area: "Chancado Pebbles",
      riesgo: "Medio",
      recursos: ["Mecánico 2", "Mecánico 3", "Mecánico 4"],
      responsable: "F. García",
    },
    {
      codigo: "2.1.1.1.8",
      nombre: "PM Chute STP027",
      fechaInicio: "05/06/25 20:00",
      fechaFin: "06/06/25 08:00",
      duracion: 12,
      estado: "Completado",
      area: "Faja Pebbles",
      riesgo: "Medio",
      recursos: ["Mecánico 5", "Soldador 2"],
      responsable: "C. López",
    },
    {
      codigo: "2.1.1.1.16",
      nombre: "Levantamiento de información para planos de plataforma para alineamiento",
      fechaInicio: "09/06/25 05:00",
      fechaFin: "09/06/25 08:00",
      duracion: 3,
      estado: "Pendiente",
      area: "Faja Pebbles",
      riesgo: "Bajo",
      recursos: ["Ingeniero 1", "Técnico CAD"],
      responsable: "M. Torres",
    },
  ];

  const getColorEstado = (estado: string) => {
    switch (estado) {
      case "Abierto":
      case "Pendiente":
        return "#dc3545";
      case "En Progreso":
        return "#ffc107";
      case "Cerrado":
      case "Completado":
        return "#198754";
      default:
        return "#6c757d";
    }
  };

  const getColorGravedad = (gravedad: string) => {
    switch (gravedad) {
      case "Alta":
        return "#dc3545";
      case "Media":
        return "#ffc107";
      case "Baja":
        return "#198754";
      default:
        return "#6c757d";
    }
  };

  const getColorRiesgo = (riesgo: string) => {
    switch (riesgo) {
      case "Alto":
        return "#dc3545";
      case "Medio":
        return "#ffc107";
      case "Bajo":
        return "#198754";
      default:
        return "#6c757d";
    }
  };

  // Filtra los eventos de mantenimiento según el filtro seleccionado
  const eventosFiltrados = selectedFilter === "Todos" 
    ? eventosMantenimiento 
    : eventosMantenimiento.filter((evento: EventoMantenimiento) => evento.riesgo === selectedFilter);

  // Calcula estadísticas de seguridad para mantenimientos
  const totalEventos = eventosMantenimiento.length;
  const eventosAltoRiesgo = eventosMantenimiento.filter((e: EventoMantenimiento) => e.riesgo === "Alto").length;
  const porcentajeAltoRiesgo = Math.round((eventosAltoRiesgo / totalEventos) * 100);
  
  const eventosCompletados = eventosMantenimiento.filter((e: EventoMantenimiento) => e.estado === "Completado").length;
  const porcentajeCompletados = Math.round((eventosCompletados / totalEventos) * 100);

  return (
    <div style={{ padding: "20px", maxWidth: "1200px", margin: "0 auto" }}>
      {/* Navegación entre pestañas */}
      <div 
        style={{ 
          display: "flex", 
          marginBottom: "20px", 
          borderBottom: "1px solid #dee2e6" 
        }}
      >
        <div 
          onClick={() => setActiveTab("KPIs")}
          style={{ 
            padding: "10px 20px", 
            cursor: "pointer", 
            fontWeight: activeTab === "KPIs" ? "bold" : "normal",
            borderBottom: activeTab === "KPIs" ? "2px solid #1976d2" : "none"
          }}
        >
          KPIs de Seguridad
        </div>
        <div 
          onClick={() => setActiveTab("Eventos")}
          style={{ 
            padding: "10px 20px", 
            cursor: "pointer", 
            fontWeight: activeTab === "Eventos" ? "bold" : "normal",
            borderBottom: activeTab === "Eventos" ? "2px solid #1976d2" : "none"
          }}
        >
          Incidentes de Seguridad
        </div>
        <div 
          onClick={() => setActiveTab("Mantenimiento")}
          style={{ 
            padding: "10px 20px", 
            cursor: "pointer", 
            fontWeight: activeTab === "Mantenimiento" ? "bold" : "normal",
            borderBottom: activeTab === "Mantenimiento" ? "2px solid #1976d2" : "none"
          }}
        >
          Eventos de Mantenimiento
        </div>
      </div>

      {/* Sección de KPIs */}
      {activeTab === "KPIs" && (
        <div style={{ marginBottom: "40px" }}>
          <h2 style={{ marginBottom: "20px", color: "#1976d2" }}>
            KPIs de Seguridad
          </h2>
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
              gap: "20px",
              marginBottom: "30px"
            }}
          >
            {kpisSeguridad.map((kpi) => (
              <div
                key={kpi.etiqueta}
                style={{
                  background: "white",
                  padding: "20px",
                  borderRadius: "8px",
                  boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
                }}
              >
                <div style={{ fontSize: "14px", color: "#666" }}>
                  {kpi.etiqueta}
                </div>
                <div
                  style={{
                    fontSize: "24px",
                    fontWeight: "bold",
                    color: kpi.valor <= kpi.meta ? "#198754" : "#dc3545",
                    marginTop: "8px",
                  }}
                >
                  {kpi.valor} {kpi.unidad}
                </div>
                <div
                  style={{
                    fontSize: "12px",
                    color: "#666",
                    marginTop: "4px",
                  }}
                >
                  Meta: {kpi.meta} {kpi.unidad}
                </div>
                <div
                  style={{
                    fontSize: "12px",
                    color: kpi.tendencia === "subiendo" ? "#198754" : "#dc3545",
                    marginTop: "4px",
                  }}
                >
                  {kpi.tendencia === "subiendo" ? "▲" : "▼"} Tendencia
                </div>
              </div>
            ))}
          </div>

          {/* KPIs adicionales para mantenimiento */}
          <h3 style={{ marginBottom: "20px", color: "#1976d2" }}>
            Estadísticas de Eventos de Mantenimiento
          </h3>
          <div
            style={{
              display: "grid",
              gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
              gap: "20px",
            }}
          >
            <div
              style={{
                background: "white",
                padding: "20px",
                borderRadius: "8px",
                boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
              }}
            >
              <div style={{ fontSize: "14px", color: "#666" }}>
                Eventos de Alto Riesgo
              </div>
              <div
                style={{
                  fontSize: "24px",
                  fontWeight: "bold",
                  color: porcentajeAltoRiesgo > 20 ? "#dc3545" : "#198754",
                  marginTop: "8px",
                }}
              >
                {porcentajeAltoRiesgo}%
              </div>
              <div
                style={{
                  fontSize: "12px",
                  color: "#666",
                  marginTop: "4px",
                }}
              >
                {eventosAltoRiesgo} de {totalEventos} eventos
              </div>
            </div>

            <div
              style={{
                background: "white",
                padding: "20px",
                borderRadius: "8px",
                boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
              }}
            >
              <div style={{ fontSize: "14px", color: "#666" }}>
                Eventos Completados
              </div>
              <div
                style={{
                  fontSize: "24px",
                  fontWeight: "bold",
                  color: porcentajeCompletados > 80 ? "#198754" : "#dc3545",
                  marginTop: "8px",
                }}
              >
                {porcentajeCompletados}%
              </div>
              <div
                style={{
                  fontSize: "12px",
                  color: "#666",
                  marginTop: "4px",
                }}
              >
                {eventosCompletados} de {totalEventos} eventos
              </div>
            </div>

            <div
              style={{
                background: "white",
                padding: "20px",
                borderRadius: "8px",
                boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
              }}
            >
              <div style={{ fontSize: "14px", color: "#666" }}>
                Duración Promedio
              </div>
              <div
                style={{
                  fontSize: "24px",
                  fontWeight: "bold",
                  color: "#1976d2",
                  marginTop: "8px",
                }}
              >
                20.5 horas
              </div>
              <div
                style={{
                  fontSize: "12px",
                  color: "#666",
                  marginTop: "4px",
                }}
              >
                Por actividad de mantenimiento
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Sección de Incidentes de Seguridad */}
      {activeTab === "Eventos" && (
        <div>
          <h2 style={{ marginBottom: "20px", color: "#1976d2" }}>
            Incidentes de Seguridad
          </h2>
          <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>
            {incidentesSeguridad.map((incidente) => (
              <div
                key={incidente.id}
                style={{
                  background: "white",
                  padding: "20px",
                  borderRadius: "8px",
                  boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
                }}
              >
                <div
                  style={{
                    display: "flex",
                    justifyContent: "space-between",
                    marginBottom: "12px",
                  }}
                >
                  <div style={{ fontWeight: "bold" }}>{incidente.tipo}</div>
                  <div
                    style={{
                      padding: "4px 8px",
                      borderRadius: "4px",
                      fontSize: "12px",
                      backgroundColor: getColorEstado(incidente.estado),
                      color: "white",
                    }}
                  >
                    {incidente.estado}
                  </div>
                </div>

                <div style={{ marginBottom: "8px", fontSize: "14px" }}>
                  <strong>Fecha:</strong> {incidente.fecha}
                </div>

                <div style={{ marginBottom: "8px", fontSize: "14px" }}>
                  <strong>Ubicación:</strong> {incidente.ubicacion}
                </div>

                <div style={{ marginBottom: "8px", fontSize: "14px" }}>
                  <strong>Gravedad:</strong>{" "}
                  <span
                    style={{
                      color: getColorGravedad(incidente.gravedad),
                      fontWeight: "bold",
                    }}
                  >
                    {incidente.gravedad}
                  </span>
                </div>

                <div style={{ marginBottom: "12px", fontSize: "14px" }}>
                  <strong>Descripción:</strong> {incidente.descripcion}
                </div>

                <div style={{ marginBottom: "8px", fontSize: "14px" }}>
                  <strong>Acciones Tomadas:</strong>
                  <ul
                    style={{
                      margin: "8px 0 0 20px",
                      padding: 0,
                      fontSize: "13px",
                    }}
                  >
                    {incidente.acciones.map((accion, index) => (
                      <li key={index}>{accion}</li>
                    ))}
                  </ul>
                </div>

                <div style={{ fontSize: "14px" }}>
                  <strong>Responsable:</strong> {incidente.responsable}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Sección de Eventos de Mantenimiento */}
      {activeTab === "Mantenimiento" && (
        <div>
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "20px" }}>
            <h2 style={{ color: "#1976d2", margin: 0 }}>
              Eventos de Mantenimiento
            </h2>
            <div style={{ display: "flex", gap: "10px" }}>
              <button
                onClick={() => setSelectedFilter("Todos")}
                style={{
                  padding: "8px 12px",
                  borderRadius: "4px",
                  border: "none",
                  backgroundColor: selectedFilter === "Todos" ? "#1976d2" : "#e9ecef",
                  color: selectedFilter === "Todos" ? "white" : "#333",
                  cursor: "pointer",
                }}
              >
                Todos
              </button>
              <button
                onClick={() => setSelectedFilter("Alto")}
                style={{
                  padding: "8px 12px",
                  borderRadius: "4px",
                  border: "none",
                  backgroundColor: selectedFilter === "Alto" ? "#dc3545" : "#e9ecef",
                  color: selectedFilter === "Alto" ? "white" : "#333",
                  cursor: "pointer",
                }}
              >
                Alto Riesgo
              </button>
              <button
                onClick={() => setSelectedFilter("Medio")}
                style={{
                  padding: "8px 12px",
                  borderRadius: "4px",
                  border: "none",
                  backgroundColor: selectedFilter === "Medio" ? "#ffc107" : "#e9ecef",
                  color: selectedFilter === "Medio" ? "white" : "#333",
                  cursor: "pointer",
                }}
              >
                Riesgo Medio
              </button>
              <button
                onClick={() => setSelectedFilter("Bajo")}
                style={{
                  padding: "8px 12px",
                  borderRadius: "4px",
                  border: "none",
                  backgroundColor: selectedFilter === "Bajo" ? "#198754" : "#e9ecef",
                  color: selectedFilter === "Bajo" ? "white" : "#333",
                  cursor: "pointer",
                }}
              >
                Bajo Riesgo
              </button>
            </div>
          </div>

          <div style={{ display: "flex", flexDirection: "column", gap: "16px" }}>
            {eventosFiltrados.map((evento) => (
              <div
                key={evento.codigo}
                style={{
                  background: "white",
                  padding: "20px",
                  borderRadius: "8px",
                  boxShadow: "0 2px 4px rgba(0,0,0,0.1)",
                }}
              >
                <div
                  style={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    marginBottom: "12px",
                  }}
                >
                  <div style={{ fontWeight: "bold", fontSize: "16px" }}>
                    {evento.nombre}
                  </div>
                  <div style={{ display: "flex", gap: "8px" }}>
                    <div
                      style={{
                        padding: "4px 8px",
                        borderRadius: "4px",
                        fontSize: "12px",
                        backgroundColor: getColorRiesgo(evento.riesgo),
                        color: "white",
                      }}
                    >
                      Riesgo {evento.riesgo}
                    </div>
                    <div
                      style={{
                        padding: "4px 8px",
                        borderRadius: "4px",
                        fontSize: "12px",
                        backgroundColor: getColorEstado(evento.estado),
                        color: "white",
                      }}
                    >
                      {evento.estado}
                    </div>
                  </div>
                </div>

                <div style={{ marginBottom: "8px", fontSize: "14px" }}>
                  <strong>Código:</strong> {evento.codigo}
                </div>

                <div style={{ display: "flex", justifyContent: "space-between", marginBottom: "8px" }}>
                  <div style={{ fontSize: "14px" }}>
                    <strong>Inicio:</strong> {evento.fechaInicio}
                  </div>
                  <div style={{ fontSize: "14px" }}>
                    <strong>Fin:</strong> {evento.fechaFin}
                  </div>
                  <div style={{ fontSize: "14px" }}>
                    <strong>Duración:</strong> {evento.duracion} horas
                  </div>
                </div>

                <div style={{ marginBottom: "8px", fontSize: "14px" }}>
                  <strong>Área:</strong> {evento.area}
                </div>

                <div style={{ marginBottom: "12px", fontSize: "14px" }}>
                  <strong>Recursos Asignados:</strong>
                  <div style={{ display: "flex", flexWrap: "wrap", gap: "5px", marginTop: "5px" }}>
                    {evento.recursos.map((recurso, index) => (
                      <div
                        key={index}
                        style={{
                          backgroundColor: "#f8f9fa",
                          padding: "4px 8px",
                          borderRadius: "4px",
                          fontSize: "12px",
                        }}
                      >
                        {recurso}
                      </div>
                    ))}
                  </div>
                </div>

                <div style={{ fontSize: "14px" }}>
                  <strong>Responsable:</strong> {evento.responsable}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default SafetyView;
