import { onDocumentWritten } from "firebase-functions/v2/firestore";
import { initializeApp } from "firebase-admin/app";
import * as logger from "firebase-functions/logger";
import { getFirestore } from "firebase-admin/firestore";

// Initialize Firebase Admin
initializeApp();

// Get Firestore instance
const firestore = getFirestore();

//get all users in firestore

const fetchUsersFromCollectionUser = async () => {
  const userTokens = [];
  const snapshot = await firestore.collection("users").get();
  snapshot.forEach((doc) => {
    const userData = doc.data();
    // Check if token exists before pushing
    if (userData.ExpoPushNotificationToken) {
      userTokens.push(userData.ExpoPushNotificationToken);
    }
  });
  return userTokens;
};









export const modifyuser = onDocumentWritten(
  "events/{eventsId}",
  async (event) => {
    // Get an object with the current document values.
    // If the document does not exist, it was deleted
    const document = event.data.after.data();
    const mensaje = document.AITNombreServicio + " - " + document.titulo;
    logger.info(`mensaje`, mensaje);
    const usuario = document.nombrePerfil;
    logger.info(`usuario`, usuario);
    const token = document.pushNotification;
    logger.info(`token`, token);

    // Get an object with the previous document values
    // const previousValues = event.data.before.data();

    // // Perform additional operations based on the document changes
    // if (document && previousValues) {
    //   // Example: Log the changes
    //   logger.info(
    //     `User ${event.params.userId} updated from`,
    //     previousValues,
    //     "to",
    //     document
    //   );
    // } else if (document) {
    //   // Example: Log the creation of a new document
    //   logger.info(`User ${event.params.userId} created with`, document);
    // } else {
    //   // Example: Log the deletion of a document
    //   logger.info(`User ${event.params.userId} deleted`);
    // }

    // Send a push notification using Expo
    const pushToken = (await fetchUsersFromCollectionUser()) || token || [];
    logger.info(`pushTokenList`, pushToken);

    const message = {
      to: pushToken,
      title: usuario,
      body: mensaje,
      sound: "default", // Ensure sound is enabled
    };

    try {
      const response = await fetch("https://exp.host/--/api/v2/push/send", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(message),
      });

      const data = await response.json();
    } catch (error) {
      console.error("Error sending push notification:", error);
    }
  }
);
